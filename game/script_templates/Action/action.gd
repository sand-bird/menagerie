class_name FooAction
extends Action
"""
"""

## options: timeout
func _init(monster: Monster, options: Dictionary = {}):
	super(monster, options.get('timeout'))

## return an array of properties to serialize & deserialize *in addition* to any
## save keys defined on superclasses of this action (including the base Action).
## this only needs to be overridden if there are keys to add.
static func _save_keys() -> Array[StringName]:
	return []

## create a new instance of this action from a serialized action dict.
## this only needs to be overridden for actions that require other parameters in
## addition to monster (eg target, dest, etc).  in that case, the action should
## pull whatever properties it needs from `input` into its constructor, and
## handle errors if something necessary is missing.
static func _deserialize(monster: Monster, input: Dictionary):
	return Action.new(monster, input)


##                    u t i l i t y   c a l c u l a t i o n                    ##
## --------------------------------------------------------------------------- ##

## result should be the amount by which the action is expected to increase or
## decrease the drive (negative for a decrease).
func estimate_mood() -> float: return 0
func estimate_belly() -> float: return 0
func estimate_energy() -> float: return 0
func estimate_social() -> float: return 0

## takes in the utility value generated by the Decider, based on the output of
## the `estimate_{drive}` functions above, and returns a new utility value.
## can be used to modify the calculated utility value or simply override it. 
func mod_utility(utility: float): return utility


##                              e x e c u t i o n                              ##
## --------------------------------------------------------------------------- ##

## called once, when the action starts running
func _start(): pass

## called each ingame tick
func _tick(): pass

## called each process update
func _proc(_delta): pass

## behavior when the timeout expires.  all actions need a timeout to prevent
## infinite loops.  by default the action fails, but this can be overridden by
## subclasses.
func _timeout(): exit(Status.FAILED)
