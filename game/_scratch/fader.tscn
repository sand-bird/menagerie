[gd_scene load_steps=4 format=2]

[ext_resource path="res://_scratch/fade_out.tres" type="Animation" id=1]



[sub_resource type="Animation" id=1]

resource/name = "fade_in"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:visibility/opacity")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 1 ),
"transitions": FloatArray( 1, 1 ),
"update": 0,
"values": [ 0, 1.0 ]
}

[sub_resource type="GDScript" id=2]

resource/name = "fader"
script/source = "extends AnimationPlayer

#var curr_target = \"\"

func _ready():
	connect(\"finished\", Callable(self, \"_on_finished\"))
	print(get_animation(\"fade_in\").track_get_path(0))
	play(\"fade_in\")
	get_animation(\"fade_in\").transform_track_interpolate(
	pass

func _exit_tree():
	print(\"exit tree\")
	play(\"fade_out\")

#func set_target(path):
#	#if path == curr_target: return
#	var anim = get_animation(get_current_animation())
#	for track in range(anim.get_track_count()):
#		anim.track_set_path(track, path + \":visibility/opacity\")

#func play(path, time):
#	set_target(path)
#	set_speed(1 / time)
#	.play(get_current_animation())
#func play(time):
#	set_speed(1 / time)
#	.play(get_current_animation())

#func fade_in(path, time):
#	set_current_animation(\"fade_in\")
#	play(path, time)

#func fade_out(path, time):
#	set_current_animation(\"fade_out\")
#	play(path, time)

func _on_finished():
	print(\"finished anim: \", get_parent().get_name())"

[node name="fader" type="AnimationPlayer"]

playback/process_mode = 1
playback/default_blend_time = 0.0
root/root = NodePath("..")
anims/fade_in = SubResource( 1 )
anims/fade_out = ExtResource( 1 )
playback/active = true
playback/speed = 1.0
blend_times = [  ]
autoplay = ""
script/script = SubResource( 2 )


