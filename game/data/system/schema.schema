{
  "$comment": "The Metaschema; used to validate other schemas as though they were data, to make sure they are correctly written.  Based on the validator implementation at `/game/system/validator.gd`, which is based on the 2020-12 JSON schema spec, but doesn't implement everything (ie only one kind of ref, no `default`, no metadata like `title`).  This is basically copied from the `core`, `validation`, and `applicator` metaschemas on the official spec, but condensed into one file.",
  "type": [
    "object",
    "boolean"
  ],
  "properties": {
    "$ref": {
      "type": "string"
    },
    "$comment": {
      "type": "string"
    },
    "$defs": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      }
    },
    "type": {
      "anyOf": [
        {
          "$ref": "#/$defs/simpleTypes"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/simpleTypes"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      ]
    },
    "const": true,
    "enum": {
      "type": "array",
      "items": true
    },
    "prefixItems": {
      "$ref": "#/$defs/schemaArray"
    },
    "items": {
      "$ref": "#"
    },
    "contains": {
      "$ref": "#"
    },
    "additionalProperties": {
      "$ref": "#"
    },
    "properties": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      }
    },
    "patternProperties": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      },
      "propertyNames": {
        "format": "regex"
      }
    },
    "dependentSchemas": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      }
    },
    "propertyNames": {
      "$ref": "#"
    },
    "if": {
      "$ref": "#"
    },
    "then": {
      "$ref": "#"
    },
    "else": {
      "$ref": "#"
    },
    "allOf": {
      "$ref": "#/$defs/schemaArray"
    },
    "anyOf": {
      "$ref": "#/$defs/schemaArray"
    },
    "oneOf": {
      "$ref": "#/$defs/schemaArray"
    },
    "not": {
      "$ref": "#"
    },
    "multipleOf": {
      "type": "number",
      "exclusiveMinimum": 0
    },
    "maximum": {
      "type": "number"
    },
    "exclusiveMaximum": {
      "type": "number"
    },
    "minimum": {
      "type": "number"
    },
    "exclusiveMinimum": {
      "type": "number"
    },
    "maxLength": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "minLength": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "pattern": {
      "type": "string",
      "format": "regex"
    },
    "format": {
      "$comment": "See http://json-schema.org/draft/2020-12/json-schema-validation.html#name-defined-formats for the full list of formats we're 'REQUIRED' to support.  The spec lists 'URI', not 'filepath', but that links to an RFC I'm not gonna bother to read so let's just define our own simple format for filerefs.",
      "type": "string",
      "enum": [
        "regex",
        "filepath",
        "date"
      ]
    },
    "maxItems": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "minItems": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "uniqueItems": {
      "type": "boolean"
    },
    "maxContains": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "minContains": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "maxProperties": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "minProperties": {
      "$ref": "#/$defs/nonNegativeInteger"
    },
    "required": {
      "$ref": "#/$defs/stringArray"
    },
    "dependentRequired": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/stringArray"
      }
    }
  },
  "$defs": {
    "schemaArray": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#"
      }
    },
    "nonNegativeInteger": {
      "type": "integer",
      "minimum": 0
    },
    "simpleTypes": {
      "enum": [
        "array",
        "boolean",
        "integer",
        "null",
        "number",
        "object",
        "string"
      ]
    },
    "stringArray": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    }
  }
}